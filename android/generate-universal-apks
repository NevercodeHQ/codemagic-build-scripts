#!/usr/bin/env python3

import argparse
import collections
import pathlib
import re
import subprocess
import sys
import tempfile
import textwrap
import urllib.request
import zipfile

SigningInfo = collections.namedtuple('SigningInfo', 'store_path store_pass key_alias key_pass')
_BUNDLETOOL_URL = 'https://github.com/google/bundletool/releases/download/0.7.2/bundletool-all-0.7.2.jar'
_BUNDLETOOL_PATH = pathlib.Path('~/programs/bundletool-all-0.7.2.jar').expanduser()


def generate_universal_apks(bundletool_path, pattern, signing_info):
    pattern_path = pathlib.Path(pattern).expanduser()
    print(f'Searching for files in {pattern_path.resolve()}')

    with tempfile.TemporaryDirectory() as d:
        if not bundletool_path and _BUNDLETOOL_PATH.exists():
            bundletool_path = _BUNDLETOOL_PATH
        elif not bundletool_path:
            bundletool_path = pathlib.Path(d) / 'bundletool.jar'
            print(f'Downloading bundletool to {bundletool_path}')
            urllib.request.urlretrieve(_BUNDLETOOL_URL, bundletool_path)

        did_find_paths = False
        for path in _get_matching_paths(pattern_path):
            did_find_paths = True
            print(f'Generating universal apk for {path}')
            apk_path = _generate_apk(bundletool_path, path, signing_info)
            print(f'Generated {apk_path.resolve()}')

    if not did_find_paths:
        print('No matching files found')


def _get_matching_paths(pattern_path):
    if pattern_path.is_absolute():
        relative_pattern_path = pattern_path.relative_to(pattern_path.anchor)
        return pathlib.Path(pattern_path.anchor).glob(str(relative_pattern_path))
    return pathlib.Path().glob(str(pattern_path))


def _generate_apk(bundletool_path, path, signing_info):
    apk_path = _get_apk_path(path)

    with tempfile.TemporaryDirectory() as d:
        apks_path = pathlib.Path(d) / 'universal.apks'

        command = [
            'java', '-jar', str(bundletool_path),
            'build-apks', '--mode', 'universal',
            '--bundle', str(path), '--output', str(apks_path)
        ]

        if signing_info:
            command.extend([
                '--ks', signing_info.store_path, '--ks-pass', f'pass:{signing_info.store_pass}',
                '--ks-key-alias', signing_info.key_alias, '--key-pass', f'pass:{signing_info.key_pass}',
            ])

        _execute_command(command)
        print('Extracting universal apk')
        with zipfile.ZipFile(apks_path, 'r') as zf, open(apk_path, 'wb+') as of:
            of.write(zf.read('universal.apk'))
    return apk_path


def _execute_command(command):
    command_preview = re.sub(r'pass:[^ ]+', 'pass:****', " ".join(command))
    print(f'Executing {command_preview}')
    return_code = subprocess.call(command)
    if return_code > 0:
        raise Exception(f'Command exited with code {return_code}')

    print(f'Command exited with status code 0')


def _get_apk_path(aab_path):
    return aab_path.parent / f'{aab_path.stem}-universal.apk'


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Generate universal APK files from Android App Bundles',
        epilog=textwrap.dedent(f'''\
            example:
              {sys.argv[0]} \\
                --ks ./upload.keystore \\
                --ks-pass Pa$$w0rd! \\
                --ks-key-alias key \\
                --key-pass KeyPa$$w0rd!''')
    )

    parser.add_argument(
        '-p', '--pattern',
        help='glob pattern to parse files, relative to current folder',
        default='**/*.aab',
    )
    parser.add_argument(
        '-bt', '--bundletool',
        help='path to bundletool jar to use for extraction',
    )

    signing_info_group = parser.add_argument_group('optional signing info')
    signing_info_group.add_argument('--ks', help='path to keystore')
    signing_info_group.add_argument('--ks-pass', help='keystore password')
    signing_info_group.add_argument('--ks-key-alias', help='keystore key alias')
    signing_info_group.add_argument('--key-pass', help='keystore key password')

    args = parser.parse_args()

    signing_info_args = (args.ks, args.ks_pass, args.ks_key_alias, args.key_pass)

    if any(signing_info_args) and not all(signing_info_args):
        parser.error('either all signing info arguments should be specified, or none of them should')

    generate_universal_apks(
        bundletool_path=args.bundletool,
        pattern=args.pattern,
        signing_info=SigningInfo(*signing_info_args) if signing_info_args else None,
    )
